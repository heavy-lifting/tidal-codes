------------------------------------------------------------------------------------------------------------------------------------
*****************************************************************************************************************
GETTING STARTED
_______________________________________________________________________________
*****************************************************************************************************************
------------------------------------------------------------------------------------------------------------------------------------

--1. Launching superdirt
--In Supercollider type ‘SuperDirt.start’ and run the code with Ctrl+Enter

--2. Launching TidalCycles
-- In Atom start a new file and save it with a .tidal extension - e.g. workshop.tidal
-- From the menu click boot>TidalCycles

--3. Comments
-- If you see a line of code with two dashes at the start like this, it’s called a comment.
-- This is text that the computer will ignore, so you can annotate your code.
-- We’ll use comments in the worksheet to explain what’s going on and what to do next


------------------------------------------------------------------------------------------------------------------------------------
*****************************************************************************************************************
2. BASIC PATTERNS
_______________________________________________________________________________
*****************************************************************************************************************
------------------------------------------------------------------------------------------------------------------------------------

-- The basic format for making sound in Tidal looks like this

d1 $ sound "bd"


-- Stop making a sound using ‘silence’

d1 silence


-- Pick a different sound from the same set, with ':'

d1 $ sound "albania"


-- * Some samples which come with Tidal are listed below.

-- flick sid can metal future gabba sn mouth co gretsch mt arp h cp cr
-- newnotes bass hc tabla bass0 hh bass1 bass2 oc bass3 ho odx
-- diphone2 house off ht tink perc bd industrial pluck trump
-- printshort jazz voodoo birds3 procshort blip drum jvbass psr wobble
-- drumtraks koy rave bottle kurt latibro rm sax lighter lt arpy feel
-- less stab ul


--You can see what other sounds there are or add your own using the Dirt-Samples folder
-- In the menu in SuperCollider
-- File > Open user support directory > downloaded-quarks > Dirt-Samples

-- Make a sequence

d1 $ sound "bd hh sn"

hush

-- The longer the sequence, the faster it runs

d1 $ sound "bd hh bd sn bd hh bd"

-- This is because of the way Tidal handles time.
-- There is a universal ‘cycle’ (sort of like a bar) which is always running.
-- Tidal will play all of the sounds between the speech marks in one cycle unless we tell it not to
-- (We’ll learn how to do that later)
-- You’ll also notice Tidal will space the sounds out evenly within the cycle
-- Which means we can end up with polyrhythmic structures (more on those later)

hush

-- We can change the length of the cycle using ‘cps’ (cycles per second) - this is a bit like bpm

cps 0.6


--You can use d1, d2, d3...d9 to play multiple sequences at the same time

-- ***health warning*** this will change in the new Tidal
-- Channels will be called whatever you like as long as you use speech marks.
-- e.g. "d1", "kick", "hippopotamus" etc

d2 $ sound "sn sn:2 sn bd sn"

hush

-- Hush stops everything at once

hush


-- You can pause everything by changing the cycle length to a negative number (remember to put negative numbers in brackets)

cps (1)


-- Start it up again with a positive number

cps 0.6


-- Or you can ‘solo’ one channel - but be warned, you can’t ‘un-solo’ (***health warning*** ...yet)

d1 $ sound "arpy ~ arpy:2"

d2 $ sound "sn sn:2 bd sn"

solo $ d2 $ sound "sn sn:2 bd sn"

hush

--Let’s try adding some more variety to our patterns
-- Add a silence/rest with '~'

d1 $ sound "bd ~ sn:3 bd sn:5 ~ bd:2 sn:2"


-- Fit a subsequence into a step with square brackets:

d1 $ sound "bd [bd cp hh [bd bd]] bd bd bd bd"

hush

-- This can make for flexible time signatures:

d1 $ sound "[bd bd sn:5] [bd sn:3]"

d2 $ sound "cp [~ cp]"

hush

-- You can put subsequences inside subsequences:

d1 $ sound "[[bd bd] bd sn:5] [bd sn:3]"

d1 $ sound "[[bd[bd bd[[bd bd]] bd bd]]bd [bd [[bd bd]]]cp cp][[[hh hh[[]]can can[[]]]]]"

-- Keep going..

d1 $ sound "[[bd [bd bd bd bd]] bd sn:5] [bd sn:3]"

hush

-- You can get a similar effect using *

d1 $ sound "bd sn*128"

hush

-- Or the opposite using /

d1 $ sound "bd*2 sn/2 bd/4 hh/3"


-- We can also schedule patterns across cycles using < and >

d1 $ sound "<bd can bottle voodoo> bd"

d1 $ sound "<bd sn> <~ [cp cp]>"

d1 $ sound "<bd sn> <~ [cp cp]> <bd [cp cp]> <~ ~ ~ can>"

hush
------------------------------------------------------------------------------------------------------------------------------------
*****************************************************************************************************************
3. EFFECTS
_______________________________________________________________________________
*****************************************************************************************************************
------------------------------------------------------------------------------------------------------------------------------------

-- Tidal has lots of effects we can use to change the way things sound

-- ‘Vowel’ is a filter which adds a vowel sound - try a, e, i, o and u

d1 $ sound "drum drum drum drum" # vowel "u "


-- We create patterns of effects in much the same way we create patterns of sounds

d1 $ sound "drum drum drum drum" # vowel "a o e e"


-- Or we can use "<>" to schedule across cycles

d1 $ sound "drum drum drum drum" # vowel "<a o e e>"


-- You can add a different letter to pause the vowel effect

d1 $ sound "drum drum drum drum" # vowel "<a o t> "

hush


-- Tidal does it’s best to map patterns across to one another

d1 $ sound "drum drum drum drum" # vowel "a o e"

cps (0.5)

-- The structure comes from the left - try swapping the parameters


d1 $ vowel "a o p i" # sound "drum can voodoo"


-- ***Health warning*** This is one of the changes coming up in the new Tidal
-- you will be able to dictate where the structure comes from


-- ‘Gain’ changes the volume of different sounds

d1 $ sound "bd hh sn:1 hh sn:1 hh" # gain "2"

hush


-- 'Speed' and ‘up’ are used for pitching samples

-- ‘Speed’ affects the speed of playback, e.g. 2 = up an octave

d1 $ sound "numbers:1 numbers:2 numbers:3 numbers:4" # speed "-1 -1.5 -2 -0.5"


-- Or we can take the pattern from the ‘speed’ parameter

d1 $ speed "1 2 4" # sound "jungbass:6"

hush

-- ‘Up’ pitches the sample up in semitones, e.g. 12 = up an octave

d1 $ up "0 1 2 3 4 5 6 7 8 9 " # sound "jungbass:6"

hush

-- ‘Pan’ allows us to create stereo effects - 0 = left, 0.5 = middle, 1 = right

d1 $ sound "numbers:1 numbers:2 numbers:3 numbers:4" # pan "1"

d2 $ sound "sn sn" # pan 0

hush

-- ‘Shape’ adds distortion (but be careful - it also makes the sound much louder)

d1 $ sound "hh*8" # shape "0.4 0.8" # gain "1"

hush

-- * feeling brave ?

-- http://tidalcycles.org/patterns.html#effects

-- delay / delaytime / delayfeedback
-- cutoff / resonance
-- room / size

-- 'sine1' is a continuous pattern following a sine curve from 0 to 1 and back

d1 $ sound "bd*32" # gain sine1

SCALE

hush

------------------------------------------------------------------------------------------------------------------------------------
*****************************************************************************************************************
4. TRANSFORMING SEQUENCES
_______________________________________________________________________________
*****************************************************************************************************************
------------------------------------------------------------------------------------------------------------------------------------



-- We can start to make much more complex patterns using transformations
-- Using functions like ‘slow’ you can start to transcend the cycle


-- ‘Slow’ stretches the pattern over more cycles

cps 1

d2 $ sound "arpy arpy:1 arpy:2 arpy:3"

d1 $ slow 2 $ sound "arpy arpy:1 arpy:2 arpy:3"

hush

-- ‘Fast’ squashes the pattern into less than one cycle
-- You might also see people writing ‘density’ - it’s the same thing!
-- Fast 0.5 is the same as slow 2!

d1 $ fast "<4 2 1>" $ sound "arpy arpy:1 arpy:2 arpy:3"

d1 $ fast 2 $ sound "arpy arpy:1 arpy:2 arpy:3" # slow 4 (gain sine1)

hush



-- ‘Hurry’ is similar to fast, but also applies a speed transformation

d2 $ sound "arpy arpy arpy:1 arpy:2"

d3 $ hurry 2 $ sound "arpy arpy arpy:1 arpy:2"

d1 $ hurry 0.5 $ sound "arpy arpy arpy:1 arpy:2"

hush

-- You can reverse a pattern with ‘rev’

d1 $ rev $  sound "arpy arpy:1 arpy:2 arpy:3"


-- Or play it forwards and then backwards with ‘palindrome’

d1 $ palindrome $ sound "arpy arpy:1 arpy:2 arpy:3"

hush

-- ‘Iter’ starts the pattern at a different point each cycle

d1 $ slow 8 $ iter 4 $ sound "numbers numbers:1 numbers:2 numbers:3"

hush

cps (1)

-- ‘Every’ allows us to schedule transformations or effects in different cycles
-- e.g.very fourth cycle, make twice as dense:

d1 $ every 4 (hurry 0.5) $ iter 3 $ sound "arpy arpy:1 arpy:2 arpy:3"

hush

-- or you could schedule an effect using #

d1 $ every "<4 2 1>" (# vowel "a o") $ sound "arpy arpy:1 arpy:2 arpy:3"

hush


-- ‘Jux’ takes a transformation or an effect and plays it in one speaker
-- the original pattern plays in the other speaker

d1 $ sound "arpy arpy:1 arpy:2 arpy:3"


d1 $ jux (rev) $ sound "arpy arpy:1 arpy:2 arpy:3"

d1 $ jux (slow 2.rev) $ sound "arpy arpy arpy:1 arpy:2"

hush

-- ‘Chunk’ applies a transformation or an effect to the first part of the pattern only

d1 $ chunk 2 (hurry 2) $ sound  "arpy arpy:1 arpy:2 arpy:3"

hush

-- Feeling brave? More than one transformation is possible - chain them together using ‘.’

d1 $ jux (rev . (slow 1.5)) $ sound "arpy arpy:1 arpy:2 arpy:3"

hush

-- Remember that everything is a pattern so we can apply these transformations to our effects too!

d1 $ sound "jvbass [jvbass jvbass] jvbass ~" # up "1 [3 5] 7"

d1 $ sound "jvbass [jvbass jvbass] jvbass ~" # iter 3 (up "1 [3 5] 7")

hush

-- what about slowing down or scaling sine and saw?


------------------------------------------------------------------------------------------------------------------------------------
*****************************************************************************************************************
5. DIFFERENT KINDS OF PATTERNS
_______________________________________________________________________________
*****************************************************************************************************************
------------------------------------------------------------------------------------------------------------------------------------

-- What is pattern, anyway?
-- Let’s think about different kinds of pattern and how Tidal can represent them

-- Cyclic / repetitive - we can use n to choose samples from a folder, this allows us to apply patterns there too!

d1 $ n "0 1 2 3" # sound "arpy"


-- ‘Run’ is a short way of writing out sequential patterns

d1 $ n (run 8) # sound "arpy"


-- or we can use ‘..’

d1 $ n "0 .. 3" # sound "arpy"




-- Symmetry


d1 $ slow 2 $ n "0 1 2 3 3 2 1 0" # sound "arpy"

d1 $ every 3 (palindrome) $ n (run 4) # sound "arpy"

hush


-- Polymetric / polyrhythmic sequences
-- Play two subsequences at once by using square brackets (sort of like one big subsequence!) separating with a comma:

d1 $ jux (iter 4) $ sound "[voodoo voodoo:3, arpy arpy:4 arpy:2, ~  hh [hh hh] hh ~]"

hush

-- If you use curly brackets instead of square you get a different effect
-- With square brackets both halves of the sequence are fitted into the cycle (polyrhythm)
-- With curly brackets the pulse is set by the left hand pattern
-- The right hand pattern can then overlap (or underlap!) (polymeter)

d1 $ sound "[voodoo voodoo:3, arpy arpy:4 arpy:2]"

d1 $ density "<4 2 1>" $ jux (iter 4) $ sound "{voodoo voodoo:3, arpy arpy:4 arpy:2}"

hush

d1 $ sound "[drum bd hh bd, can can:2 can:3 can:4 can:2]"

d1 $ sound "{drum bd hh bd, can can:2 can:3 can:4 can:2}"

d1 $ sound "[bd sn, can:2 can:3 can:1, arpy arpy:1 arpy:2 arpy:3 arpy:5]"

d1 $ sound "{bd sn, can:2 can:3 can:1, arpy arpy:1 arpy:2 arpy:3 arpy:5}"

hush


-- Euclidian rhythm/Bjorklund
-- If you give two numbers in brackets after an element in a pattern
-- then Tidal will distribute the first number of sounds equally across the second number of steps
-- this is similar to using curly brackets

d1 $ sound "can can"

d2 $ sound "bd bd"

d2 silence

-- You can use this notation within a single element of a pattern:

d1 $ sound "bd(3,8) sn*2"

d2 $ slow  4 $ sound "bd(8,17)"

hush

-- You can also add a third parameter, which ‘rotates’ the pattern so it starts on a different step:

d1 $ sound "can(3,5,2)"

hush

------------------------------------------------------------------------------------------------------------------------------------
*****************************************************************************************************************
6. RANDOMNESS
_______________________________________________________________________________
*****************************************************************************************************************
------------------------------------------------------------------------------------------------------------------------------------

-- Randomness can help us introduce character into our patterns

-- ‘Sometimes’ works a bit like ‘every’, but instead of happening after a set period, changes have a random chance of appearing

d1 $ sometimes (slow 2) $ sound "drum*8"

hush

-- ‘Often’ works like sometimes but happens more often!

d1 $ often (# speed "2") $ sound "drum*8"

hush


-- ‘Irand’ generates a random integer up to the number specified
-- e.g. to play a random sample

d1 $ sound "arpy*8" # n (irand 16)

hush



-- ‘Rand’ generates a random decimal between 0 and 1

d1 $ sound "bd*16" # slow 4 (cutoff (scale 0 1200 rand))

hush

-- You can use ‘degradeBy’ to remove random elements.  The number indicates how likely a smaple is to play

d1 $ degradeBy 0.99 $ sound "bd*16"

hush

-- Or you can use ? to remove sounds with a 50% likelihood

d1 $ sound "can*64?" # up "1 5 3 7 5"

hush

------------------------------------------------------------------------------------------------------------------------------------
*****************************************************************************************************************
7. MANIPULATING SAMPLES
_______________________________________________________________________________
*****************************************************************************************************************
------------------------------------------------------------------------------------------------------------------------------------

-- We might want to use some longer samples, but this can cause us some problems if we’re not careful
-- Let’s see what happens with a long sample

d1 $ sound "bev"

hush


-- Tidal will keep triggering the sample each cycle, even if it’s very long.  Even if you stop the pattern playing, you will still need to listen until the samples finish

-- You can use ‘cut’ to truncate the sample when the next one is triggered

d1 $ sound "bev" # cut 1



-- The number in ‘cut’ define a group, so you can play with interference across different patterns

d1 $ sound "skel:0" # cut 1

d2 $ slow 4 $ sound "pebbles ~" # cut 1

hush


-- ‘Legato’ also truncates samples, but using a fixed length

d1 $ sound "bev ~ bev ~" # legato 4

hush

-- We can also ‘chop’ samples for a ‘granular synthesis' effect

d1 $ chop "<32 16 2 128>" $ sound "bsbass"

hush

-- ‘Striate’ is similar to ‘chop’ but organises the playback in a different way

d1 $ slow 4 $ chop 4 $ sound "arpy:1 arpy:2 arpy:3 arpy:4"

d1 $ slow 4 $ striate 4 $ sound "bsbass bsbass"

hush

-- ‘Randslice’ chops the sample into pieces and then plays back a random one each cycle

d1 $ randslice 32 $ sound "bev*32?" # cut 1

hush


-- We can also use ‘loopAt’ to fit samples to a set number of cycles:

d1 $ loopAt "<16 8>" $ chop 32 $ sound "bev bev" # cut 1

hush



-- As always we can add patterns and transformations to these functions, or combine them for interesting effects

d1 $ loopAt "<8 4 16>" $ chop 64 $  sound "bev*4" # cut 1

d1 $ rev $ loopAt 8 $ chop 128 $ sound "bev"

hush


d1








------------------------------------------------------------------------------------------------------------------------------------
*****************************************************************************************************************
_______________________________________________________________________________
*****************************************************************************************************************
------------------------------------------------------------------------------------------------------------------------------------
What is the cycle?
Basic "bd sn"
Silence
Multiple lines
Hush
Solo?
Samples
Rests
Square brackets/*
"<>"

SELECTING SAMPLES


Pan
Gain
Vowel
Speed
Up
Shape
delay / delaytime / delayfeedback
Cutoff / resonance
Room / size

Sine, saw, scale etc

Complex patterns and manipulating samplrs
Fast
Slow
Hurry
Every
Rev
Jux
Iter
Chunk

Polyrhythm/polymeter
Types of pattern - cyclical, symmetrical, palindrome etc
run
Euclidian rhythm

Long samples
Loopat
Chop
Ransdslice
Striate

18. Randomness
Sometimes
Often
rand/irand
?
degradeBy

Synths????? MIDI?
