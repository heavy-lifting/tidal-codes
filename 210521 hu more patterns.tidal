**********THINKING ABOUT PATTERNS**********

-- What is pattern, anyway?

-- Let's think about some different kinds of pattern and how Tidal can represent them

-- Cyclic / repetitive
-- We can use n to choose samples from a folder, this allows us to apply patterns there too!

d1

d1 $ n "0 1 2 3" # sound "jvbass"

d1 $ sound "jvbass" # n "0 1 2 3"

hush

-- Run is a short way of writing out sequential patterns

d1 $ sound "hh*4" # n (run 4)

hush

--or we can use .

d1 $ n "2 .. 5" # sound "jvbass"

hush

-- Symmetry

d1 $ slow 2 $ n "0 1 2 3 3 2 1 0" # sound "arpy"

d1 $ every 4 (palindrome) $ n "[0 5] 0 [3 2] 1" # sound "arpy"

hush

-- Polymetric / polyrhythmic sequences
-- Play two subsequences at once by using square brackets (sort of like one big subsequence!)
-- separating with a comma:

d1 $ sound "[jvbass jvbass:2, arpy arpy:4 arpy:2]"

hush

d1 $ sound "voodoo voodoo:3"

d2 $ sound "arpy arpy:4 arpy:2"

-- If you use curly brackets instead of square you get a different effect.
-- With square brackets both halves of the sequence are fitted into the cycle (polyrhythm).
-- With curly brackets the pulse is set by the left hand pattern.
-- The right hand pattern can then overlap (or underlap!) (polymeter).

d1 $ sound "[voodoo voodoo:3, arpy arpy:4 arpy:2]"

d1 $ sound "{kick ~ kick ~, arpy arpy:4 arpy:2}"

d2 $ sound "kick kick"

hush

d1 $ sound "[drum bd hh bd, can can:2 can:3 can:4 can:2]" # gain 1.4

d1 $ sound "{drum bd hh bd, can can:2*4 can:3 [~ can:4] can:2}" # gain 1.4

hush

d1 $ sound "[bd sn, can:2 can:3 can:1, arpy arpy:1 arpy:2 arpy:3 arpy:5]"

d1 $ sound "{bd sn, can:2 can:3 can:1, arpy arpy:1 arpy:2 arpy:3 arpy:5}"

hush

-- Euclidian rhythm/Bjorklund
-- If you give two numbers in brackets after an element in a pattern,
-- then Tidal will try to distribute the first number of sounds
-- equally across the second number of steps.

d2 $ sound "hh hh hh hh"

hush

d1 $ sound "bd(7,19)"

X _ _ X _ _ X _

-- You can use this notation within a single element of a pattern:

d1 $ sound "bd(3,8) hh*2"

d1 $ sound "bd(3,8) hh(5,8) cp cp"

hush

-- You can also add a third parameter, which ‘rotates’ the pattern so it starts on a different step:

d1 $ sound "bd(5,8,<2 1>)"

-- And of course you can treat these like a pattern too!

d1 $ sound "bd(<3 5>,8,<2,5>)"

hush
