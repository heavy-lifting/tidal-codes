**********GETTING STARTED**********

--Once everything is installed, follow the following startup procedure each time.

-- Launch SuperDirt
-- In Supercollider, type 'SuperDirt.start'
-- Then run the code using 'Ctrl/Cmd' and pressing 'Enter'
-- Launch TidalCycles - In your text editor start a new file with a .tidal extension

**********BASIC PATTERNS**********

-- The basic format for making sound in Tidal looks like this
-- And you run the code by pressing Ctrl + Enter

d1 $ sound "drum bd hh cp"

-- stop everything using hush
hush

d1 $ sound "hh*4"

-- You can stop making a sound using silence:

d1 $ silence

-- Pick a different sound from the same set, with `:`

d1 $ sound "drum:1"

-- Some of the samples which come with Tidal are listed below. Try some out!

flick sid can metal future gabba sn mouth co gretsch mt arp h cp
cr newnotes bass hc tabla bass0 hh bass1 bass2 oc bass3 ho odx
diphone2 house off ht tink perc bd industrial pluck trump printshort
jazz voodoo birds3 procshort blip drum jvbass psr wobble drumtraks koy
rave bottle kurt latibro rm sax lighter lt arpy feel less stab ul

-- You can see what other sounds there are
-- (or add your own) by looking in the Dirt-Samples folder.
-- You can find it via the SuperCollider menu:
-- 'File > Open user support directory > downloaded-quarks > Dirt-Samples'.

-- Make a sequence
d1 $ sound "bd hh sn hh hh tink perc perc perc perc"

-- The more steps in the sequence, the faster it goes:

d1 $ sound "bd bd hh bd"

d2 $ sound "tink ~ perc bottle arpy"

d2 silence

-- This is because of the way Tidal handles time.
-- There is a universal ‘cycle’ (sort of like a musical 'bar')
-- which is always running.
-- Tidal will play all of the sounds between the speech marks in one cycle,
-- unless we tell it not to
-- (we’ll learn how to do that later).
-- You’ll also notice Tidal will space the sounds out evenly within the cycle
-- Which means we can end up with polyrhythmic structures (more on those later).

-- We can change the length of the cycle using setcps
-- (where cps stands for cycles per second)
-- This is a bit like bpm (beats per minute).

setcps (120/60/4)

-- You can use d1, d2, d3...d9 to play multiple sequences at the same time

d2 $ sound "jvbass*4"

hush

-- Let add some more variety to our sequences.

-- Add a silence/rest with ~:

d1 $ sound "bd ~ ~ ~ sn:5 ~ bd:2 ~"

d2 silence

-- Fit a subsequence into a step with square brackets:

d2 $ sound "bd sn [~ [hh hh]] cp"

d1 $ sound "jvbass jvbass*2 ~ jvbass:2 "

hush

-- This can make for flexible time signatures:

d1 $ sound "[cp cp cp]"

d2 $ sound "arpy arpy:2"

hush

-- You can put subsequences inside subsequences:

d1 $ sound "[[bd bd] bd sn:5] [bd sn:3]"

hush

-- Keep going..

d1 $ sound "[[bd [bd bd bd bd]] bd sn:5] [bd sn:3]"

hush

-- You can repeat a step with *:

d1 $ sound "bd sd*2"

-- This works with subsequences too:

d1 $ sound "bd [sd cp]*2"

hush

-- Or you can do the opposite using /:

d1 $ sound "bd sn/2"

d1 $ sound "bd [sn cp hh hh]/2"

hush

-- * works by 'speeding up' a step to play it multiple times.
-- / works by 'slowing it down'.

-- We can also schedule patterns across cycles using < and >:

d1 $ sound "bd <sd cp jvbass>"

hush

d1 $ sound "<bd sn> <sd [cp cp]>"

-- We can add a bit of randomness using ?
-- ? means the sound will play with 50% probability

d2 $ sound "hh*8?"

hush

**********CONTROL PATTERNS**********

--Tidal has lots of effects we can use to change the way things sound.
--the important thing is that we can use the mini-notation in other places
--to create control patterns

-- vowel is a filter which adds a vowel sound
-- try a, e, i, o and u

d1 $ sound "drum drum drum drum"

hush

d1 $ sound "drum drum drum drum" # vowel "o"

-- We create patterns of effects in much the same way we create patterns of sounds.
-- We call these effect and sound patterns 'control patterns'. So

d1 $ sound "drum drum drum drum" # vowel "a o i"

hush

-- Remember that we can use "<>" to schedule across cycles

d1 $ sound "drum drum drum drum" # vowel "<a o e e>"

hush

-- You can add a non-vowel letter to pause the vowel effect

d1 $ sound "drum drum drum drum" # vowel "a o p p"

-- Tidal does its best to map patterns across to one another

d1 $ sound "drum drum drum drum" # vowel "a o e"

hush

-- The structure comes from the left - try swapping the parameters

d1 $ vowel "a o e" # sound "hh cp sn tink bottle arpy"

d2 $ sound "arpy" # note "<0 2 3 4 5 7>"

hush

**********THINKING ABOUT PATTERNS**********

-- What is pattern, anyway?

-- Let's think about some different kinds of pattern and how Tidal can represent them

-- Cyclic / repetitive
-- We can use n to choose samples from a folder, this allows us to apply patterns there too!

d1

d1 $ n "0 1 2 3" # sound "jvbass"

d1 $ sound "jvbass" # n "0 1 2 3"

hush

-- Run is a short way of writing out sequential patterns

d1 $ sound "hh*4" # n (run 4)

hush

--or we can use .

d1 $ n "2 .. 5" # sound "jvbass"

hush

-- Symmetry

d1 $ slow 2 $ n "0 1 2 3 3 2 1 0" # sound "arpy"

d1 $ every 4 (palindrome) $ n "[0 5] 0 [3 2] 1" # sound "arpy"

hush

-- Polymetric / polyrhythmic sequences
-- Play two subsequences at once by using square brackets (sort of like one big subsequence!)
-- separating with a comma:

d1 $ sound "[jvbass jvbass:2, arpy arpy:4 arpy:2]"

hush

-- If you use curly brackets instead of square you get a different effect.
-- With square brackets both halves of the sequence are fitted into the cycle (polyrhythm).
-- With curly brackets the pulse is set by the left hand pattern.
-- The right hand pattern can then overlap (or underlap!) (polymeter).

d1 $ sound "[kick ~ kick ~, arpy arpy:4 arpy:2]"

d1 $ sound "{kick ~ kick ~, arpy arpy:4 arpy:2}"

d1 $ sound "[drum bd hh bd, can can:2 can:3 can:4 can:2]" # gain 1.4

d1 $ sound "{drum bd hh bd, can can:2 can:3 can:4 can:2}" # gain 1.4

d1 $ sound "{drum bd hh bd, can can:2*4 can:3 [~ can:4] can:2}" # gain 1.4

hush

-- Euclidian rhythm/Bjorklund
-- If you give two numbers in brackets after an element in a pattern,
-- then Tidal will try to distribute the first number of sounds
-- equally across the second number of steps.

d2 $ sound "hh hh hh hh"

hush

d1 $ sound "bd(3,8)"

X _ _ X _ _ X _

-- You can use this notation within a single element of a pattern:

d1 $ sound "bd(3,8) hh*2"

hush

-- You can also add a third parameter, which ‘rotates’ the pattern so it starts on a different step:

d1 $ sound "bd(5,8,<2 1>)"

-- And of course you can treat these like a pattern too!

d1 $ sound "bd(<3 5>,8,<2,5,3>)"

hush

**********EFFECTS**********
-- gain changes the volume of different sounds

d1 $ sound "bd hh sn:1 hh sn:1 hh"

d1 $ sound "bd hh sn:1 hh sn:1 hh" # gain sine

hush

-- speed and up are used for pitching samples.

-- speed affects the speed of playback,
-- e.g. 2 = play the sample twice as fast and move the note up an octave

d1 $ sound "numbers:1*4" # speed "1 1.5 2 0.5" # legato "0.25 0.5"

hush

-- Or we can take the pattern from the speed parameter

d1 $ speed "1 2 ~ 4" # sound "jungbass:6" # legato 0.25

hush

-- up pitches the sample up in semitones, e.g. 12 = up an octave

d1 $ up "[0, 2, 4]" # sound "jungbass:6"

hush

-- pan allows us to create stereo effects - 0 = left, 0.5 = middle, 1 = right

d1 $ sound "numbers:1 numbers:2 numbers:3 numbers:4" # pan "<0 1>"

hush

-- shape adds distortion (but be careful - it also makes the sound much louder)

d1 $ sound "kurt:4 kurt:4"

d1 $ sound "kurt:4 kurt:4"
  # shape "0 0.78"
  # gain "0.7"
  # vowel "<a o p>"

hush

-- feeling brave ?
-- Try more effects: https://tidalcycles.org/index.php/Category:Control_Functions

-- delay / delaytime / delayfeedback / cutoff / resonance / room / size

**********TRANSFORMING PATTERNS**********

-- We can start to make much more complex patterns using transformations

-- Using functions like slow you can start to transcend the cycle

-- slow stretches the pattern over more cycles

d1 $ sound "arpy arpy:1 arpy:2 arpy:3"

d1 $ slow "<4 2 1>" $ sound "arpy arpy:1 arpy:2 arpy:3"

hush

-- fast squashes the pattern into less than one cycle

-- You might also see people writing density - it’s the same thing!

d1 $ slow "<0.5 1 [ 1 2]>" $ sound "arpy arpy:1 arpy:2 arpy:3"

hush

-- fast 0.5 is the same as slow 2!

d1 $ fast 0.5 $ sound "arpy arpy:1 arpy:2 arpy:3"

-- hurry is similar to fast, but also applies a speed transformation

d1 $ sound "arpy arpy arpy:1 arpy:2"

d1 $ hurry 2 $ sound "arpy arpy arpy:1 arpy:2"

d1 $ hurry 0.5 $ sound "arpy arpy arpy:1 arpy:2"

-- and of course you can put a pattern into your transformation too!

d1 $ hurry "0.5 1 2" $ sound "arpy arpy arpy:1 arpy:2"

d1 $ hurry "<0.5 1 2>" $ sound "arpy arpy arpy:1 arpy:2"

-- OK SO WHAT EXACTLY IS GOING ON HERE????

d1 $ n "0 1" # sound "drum"

d1 $ fast "0.5" $ n "0 1" # sound "drum"

d1 $ fast "2" $ n "0 1" # sound "drum"

d1 $ jux (rev)
  $ iter 4
  $ fast "0.5 2 4 1"
  $ n "0(<3 2>,8) 1"
  # sound "drum? cp"
  # vowel "<a o p>"

hush

-- You can reverse a pattern with ‘rev’

d1 $ fast "1 2" $ every 4 ( rev) $ sound "arpy arpy:1 arpy:2 arpy:3"
  # speed "{1 0.5, -1 2 -0.5}"

hush

-- Or play it forwards and then backwards with ‘palindrome’

d1 $ palindrome $ sound "arpy arpy:1 arpy:2 arpy:3"

hush

-- iter starts the pattern at a different point each cycle,
-- shifting it the given number of times until it gets back to where it started

d1 $ jux (rev) $ iter 4 $ sound "arpy arpy:1 arpy:2 arpy:3"

hush

d1 $ slow 2 $ iter 4 $ n "0 1 2 3" # sound "numbers"

hush

-- every allows us to schedule transformations or effects in different cycles
--e.g. every fourth cycle, play twice as fast:

d1 $ every "<4 3>" (slow "1 2") $ sound "arpy arpy:1 arpy:2 arpy:3"

hush

-- ... or you could schedule an effect in the same way, using #

d1 $every 4 (rev) $ iter 4 $ sound "arpy arpy:1 arpy:2 arpy:3" # vowel "a"

hush

-- jux (short for 'juxtapose') takes a transformation or an effect and plays it in one speaker
-- the original pattern plays in the other speaker.

d1 $ rev $ sound "arpy arpy:1 arpy:2 arpy:3"

d1 $ jux (rev) $ sound "arpy arpy:1 arpy:2 arpy:3"

d1 $ n "0 1 2 3" # sound "drum"

hush

-- or we can chain multiple transformations together with .


d1 $ jux (hurry 2.rev.iter 4) $ sound "arpy arpy arpy:1 arpy:2"

d1 $ jux (rev . slow 1.5) $ sound "arpy arpy:1 arpy:2 arpy:3"

-- chunk applies a transformation or an effect to a different part of the pattern each time.
-- For example with 4 as a parameter, it will step through each quarter of the cycle.

d1 $ chunk 4 (hurry 2) $ sound  "alphabet:0 alphabet:1 alphabet:2 alphabet:3"



hush

-- Remember that (almost) everything is a pattern so we can apply these transformations to our effects too!

d1 $ sound "jvbass [jvbass jvbass] jvbass ~" # speed "1 [3 5] 7"

d1 $ sound "rave [arpy jvbass] arpy ~" # every 4 (rev) (speed "1 [3 5] 7") # cut 1

hush

d1 $ sometimes (rev) $ "cp hh bd sn"

hush

**********RANDOMNESS**********

-- Randomness can help us quickly introduce character and variation into our patterns

-- sometimes works a bit like every, but instead of happening after a set period,
-- changes have a random chance of appearing

d1 $ sometimes (# vowel "<a i>") $ sound "drum*8"

hush

-- often works like sometimes but happens more often!

d1 $ often (# speed "2") $ sound "drum*8"

-- or we can use sometimesBy to set the likelihood of an event happening:

d1 $ sometimesBy 0.1 (rev) $ sound "drum cp drum sn"

hush

-- 0.2 means the transformation will happen 20% of the time

-- irand generates a random integer up to the number specified. e.g. to play a random sample:

d1 $ sound "arpy*16" # cutoff (irand 1200)

hush

d1 $ n (irand 16) # sound "arpy"

-- rand generates a random decimal between 0 and 1

d1 $ sound "tink*16" # gain rand

hush

-- You can use degradeBy to remove random elements. The number indicates how likely a sample is to play:

d1 $ degrade $ sound "tink*4"

d2 $ degrade $ sound "cp*4"

hush

-- (degrade on its own is the same as degradeBy 0.5)

**********CONTINUOUS PATTERNS**********

-- Randomness is actually a form of continuous pattern, like an oscillator :)

-- Tidal also lets us generate sine, saw, triangle and square waves
-- There is also cosine which is a shifted sinewave
-- And isaw which is an inverted saw wave

-- By default the waves oscillate between 0 and 1, and repeat once per cycle

d2 $ sound "tink*16" # speed sine

d1 $ sound "tink*16" # speed cosine

hush

d1 $ sound "tink*16" # speed saw

d1 $ sound "tink*16" # speed isaw

d1 $ sound "tink*16" # speed tri

d1 $ sound "tink*16" # speed square

hush

-- We can apply a transformation to the oscillator

d1 $ sound "bev*4" # legato 2

hush

(slow 4 sine)

-- You can adjust the range of the oscillator too

d1 $ sound "tink*16" # speed sine

d1 $ sound "tink*16" # speed (range 1 4 rand)

d2 $ sound "bottle*8" # speed (range 2 8 rand)

hush

(range 1 4 sine)

-- And we can add a pattern of parameters

d1 $ sound "tink*16" # speed (range 1 4 sine)

d1 $ sound "tink*16" # speed (range "<1 2>" "<4 8 2>" sine)

hush

-- or start to use other oscillators to modulate the pattern
-- and start to do a bit of synthesis........

d1 $ sound "tink*16" # speed (range (slow 4 $ range saw 1 8) (sine) sine) # cut 1

hush

d1 $ sound "bev"

hush

-- but maybe that's a little complex :P

-- This is the same for the random number generators too

d1 $ sound "tink*16" # speed (range 1 4 rand)

-- Because these oscillators generate a constant stream of numbers
-- there are no trigger points or structure to form a pattern:

d1 $ speed sine # sound "tink"

-- We can use a function called segment to sample the stream

d1 $ segment (range 1 4 saw)  $ speed sine # sound "tink"

d1 $ sound "tink*4" # speed sine

hush

-- And this is the same for rand and irand

d1 $ irand 4 # sound "arpy"

d1 $ segment 16 $ irand 4 # sound "arpy"

hush

-- And of course we can pattern that parameter too :)

d1 $ segment "8 16 4 2" $ speed sine # sound "tink"

-- Or apply transformations

d1 $ iter 4 $ segment "8 16 4 2" $ speed sine # sound "tink"

d1 $ stack [
  sound "cp",
  sound "hh hh"
] # speed "0.5 1"

hush

-- Try bringing some continuous patterns into the code you've been working on
-- Don't forget to use slow/fast and range to modify the pattern

**********MANIPULATING SAMPLES**********

-- So far we've just used short samples.
-- Longer samples can cause us some problems if we’re not careful.
-- Let’s see what happens with a long sample

d1 $ sound "bev"

-- wait a bit, then..

hush

-- As you can hear, Tidal will keep triggering the sample each cycle,
-- even if it’s very long.
-- Even if you stop the pattern playing,
-- you will still need to listen while the samples play out.

-- You can use cut to truncate the sample when the next one is triggered

d1 $ sound "bev*16" # cut 1

hush

-- legato also truncates samples, but using a fixed length

d1 $ sound "bev ~ bev ~" # legato "1 0.5"

d2 $ sound "cp cp cp cp "

hush

-- We can also chop samples for a ‘granular synthesis' effect

d1 $ sound "arpy"

d1 $ chop 4 $ sound "arpy"

d1 $ n (run 8) # sound "arpy"

d1 $ chop 4 $ n (run 8) # sound "arpy"

d1 $ chop 128 $ n (run 8) # sound "arpy"

d1 $ chop 128 $ n (run 8) # sound "arpy" # speed sine

hush

-- striate is similar to chop but organises the playback in a different way

d1 $ sound "arpy:1 arpy:2 arpy:3 arpy:4"

d1 $ striate 4 $ sound "arpy:1 arpy:2 arpy:3 arpy:4"

hush

-- randslice chops the sample into pieces and then plays back a random one each cycle

d1 $ sound "bev"

d2 $ sound "drum*4 drum(3,8)" # n (irand 4)

hush

-- We can also use loopAt to fit samples to a set number of cycles:

d1 $ loopAt 8 $ sound "bev"

d2 $ jux (iter 4) $ sound "drum*4 drum(3,8)" # n (irand 4)

d2 silence

hush

-- As always we can add patterns and transformations to these functions, or combine them for interesting effects

d1 $ rev $ loopAt 4 $ chop 32 $ sound "bev"

hush

-- Slice lets you chop up a sample into bits and then rearrange those how you like

d1 $ sound "breaks165"

hush

d1 $ slice 8 "7 [6 5 4] <3 2> <1 0>"  $ sound "breaks165"
  # legato 1

d1 $ slice 8 "7 6 5 4 4 4 4 4"  $ sound "breaks165"
  # legato 1

  hush

-- Splice does the same thing but alters the speed of the sample to fit the step

d1 $ slice 8 "[<0*8 0*2> 3*4 2 4] [4 .. 7]" $ sound "breaks165"

d1 $ splice 8 "[<0*8 0*2> 3*4 2 4] [4 .. 7]" $ sound "breaks165"

hush

**********BONUS FUNCTIONS: BITE AND CHEW**********

-- Bite works like slice but on the whole pattern

d1 $ n "0 .. 7" # sound "arpy"

d1 $ bite 4 "2 0 1 3" $ n "0 .. 7" # sound "arpy"

-- the bits of pattern get squeezed or stretched to fit

d1 $ bite 2 "2 0 1 3" $ n "0 .. 7" # sound "arpy"

d1 $ bite 4 "2 [0 3] 1*4 1" $ n "0 .. 7" # sound "arpy"

-- chew works the same as bite but also speeds up/slows down the sample speed like Splice

d1 $ bite 4 "0 1*2 2*2 [~ 3]" $ n "0 .. 7" # sound "arpy"

d1 $ chew 4 "0 1*2 2*2 [~ 3]" $ n "0 .. 7" # sound "arpy"

********** SYNTHS **********

-- Tidal comes with some built in synth sounds and you can add your own sound to SuperCollider
-- Or you can use MIDI to control hardware or software synths
-- You can also control other devices using Open Sound Control (OSC)

-- The syntax for controlling synths is the same as for Samples
-- But some of the control patterns might work differently
-- I find with synths, it makes a lot of sense to define your note pattern on the left

-- We can call notes with numbers:
d1 $  sound "superpiano(5,8)" # n (irand 8)

d1 silence

-- Some synths to try:
physical modeling synths: supermandolin, supergong, superpiano, superhex
a basic synth drumkit: superkick, superhat, supersnare, superclap, super808
four analogue-style synths: supersquare, supersaw, superpwm, supercomparator
two digital-style synths: superchip, supernoise

-- Or note names:
d1 $ n "c a f e" # sound "supermandolin"

-- We can use s and f to indicate sharps and flats
d1 $ n "g bf ds" # sound "supergong"

-- We can use note name and number to choose our octave
d1 $ n "c4 c5 c6 c7" # sound "supersaw"

-- Or we can call midinotes (this is more useful for MIDI stuff though, clearly)
d1 $ midinote "41 44 48 44" # sound "superchip"


-- The sustain command lets us control the length of the note:
d1 $ n "c4 c5 c6(3,8) c7" # sound "supernoise" # gain 0.8

hush

d1 $ n "c4 c5" # sound "supersaw" # sustain 2 # gain 0.8

hush

-- and of course we can use any mini-notation, transformations, and effects that we like:
d1 $ every 4 (slow 2) $ jux (iter 4) $ n "c(3,8) a f/2 e" # sound "superpiano" # room 0.5 # sustain 0.25

-- if we're not good at music theory we can use the scale function to keep everything in key:
d1 $ n "0 3 5 7" # sound "superpiano"

hush

d1 $ n (scale "minor" "0 3 5 7") # sound "superpiano"

d1 $ n (scale "<minor major>" "0 3 5 7") # sound "superpiano"

-- scaleList gives us a list of all available scales
-- (and you can define your own, but we won't be looking at that today)

scaleList

-- We can create chords using the mininotation:

d1 $ n "[f,gs,c] [c,ds,gs]" # sound "superpiano"

hush

-- And pattern them:

d1 $ n "[f,gs,c]*2 [c,ds,gs](3,8)" # sound "superpiano"

-- But we can also use the Tidal chord library to define shorthands for chords

-- First we need to import the chord library

import Sound.Tidal.Chords

-- chordList gives us a list of Chords

chordList

-- to call chords we use '

d1 $ n "c'sevenSharp5flat9(3,8)" # sound "superpiano"

hush
